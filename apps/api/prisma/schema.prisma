// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String?
  oauthId            String?        @unique
  emailVerified      Boolean        @default(false)
  role               Role           @default(USER)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  hashedRefreshToken String?
  resetToken         String?
  name               String? // Display name
  image              String? // Profile picture
  // Authentication and core fields
  username           String?        @unique // Username for login
  // Relations
  profileId          String?
  profile            Profile?
  sentMessages       Message[]      @relation("SentMessages")
  receivedMessages   Message[]      @relation("ReceivedMessages")
  notifications      Notification[]
  posts              Post[]         @relation("UserPosts")
  comments           Comment[]      @relation("UserComments")
  replies            Reply[]        @relation("UserReplies")
  likes              Like[]         @relation("UserLikes")

  otps Otp[]

  @@index([email, id])
  @@index([username]) // إضافة فهرس للبحث السريع باسم المستخدم
  @@index([name]) // إضافة فهرس للبحث باسم العرض، مفيد لعمليات البحث
  @@index([createdAt]) // فهرس للفرز والتصفية حسب تاريخ الإنشاء
}

enum PostStatus {
  DRAFT
  PUBLISHED
  DELETED
}

model Post {
  id        String     @id @default(uuid())
  title     String     @default("")
  content   String
  imageUrl  String?
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    PostStatus @default(DRAFT)

  tags     PostTag[]
  user     User      @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[] @relation("PostComments")
  likes    Like[]    @relation("PostLikes")

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([title])
  @@index([content])
  @@index([categoryId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@index([name])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts PostTag[]

  @@index([name])
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model Otp {
  id        String   @id @default(uuid())
  expiresIn DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      Int
  createdAt DateTime @default(now())
}

model Profile {
  id           String   @id @default(uuid())
  userId       String   @unique
  company      String?
  bio          String?
  location     String?
  website      String?
  contactEmail String?
  jobTitle     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills      Skill[]
  projects    Project[]
  socialLinks SocialLink[]
  following   Follow[]     @relation("Following")
  follower    Follow[]     @relation("Follower")

  @@index([userId, id]) // تحسين البحث حسب معرّف المستخدم
  @@index([createdAt]) // للفرز حسب تاريخ الإنشاء
  @@index([updatedAt]) // للفرز حسب تاريخ التحديث
}

model Skill {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profiles Profile[]
  projects Project[]

  @@index([name]) // فهرس للبحث السريع باسم المهارة
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String?
  projectUrl  String?
  profileId   String
  videoUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isFeatured  Boolean  @default(false)

  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  skills  Skill[]

  @@index([profileId])
  @@index([title])
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  String // e.g., "github", "instagram", "linkedin"
  url       String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([platform]) // إضافة فهرس للبحث حسب المنصة
  @@index([profileId, platform]) // فهرس مركب للبحث عن منصة محددة لملف شخصي معين
}

model Message {
  id         String   @id @default(uuid())
  content    String
  isRead     Boolean  @default(false)
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

// schema.prisma
model Notification {
  id       String           @id @default(uuid())
  type     NotificationType // نوع محدد للإشعارات
  message  String
  link     String?
  imageUrl String? // لتخزين صورة المرسل أو أي صورة متعلقة بالإشعار
  metadata Json? // معلومات إضافية تختلف حسب نوع الإشعار (عدد اللايكات، معرفات المستخدمين، الخ)

  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
}

enum NotificationType {
  MESSAGE
  FOLLOW
  LIKE
  COMMENT
  SYSTEM
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  Profile @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Ensure no duplicate follows
  @@index([followerId])
  @@index([followingId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post    Post    @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user    User    @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  replies Reply[] @relation("CommentReplies")
  likes   Like[]  @relation("CommentLikes")

  @@index([postId])
  @@index([userId])
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  commentId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  comment Comment @relation("CommentReplies", fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation("UserReplies", fields: [userId], references: [id], onDelete: Cascade)
  likes   Like[]  @relation("ReplyLikes")

  @@index([commentId])
  @@index([userId])
}

model Like {
  id        String   @id @default(uuid())
  postId    String? // قد يكون null إذا كان الإعجاب على تعليق أو رد
  commentId String? // قد يكون null إذا كان الإعجاب على منشور
  replyId   String? // قد يكون null إذا كان الإعجاب على منشور أو تعليق
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user    User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  reply   Reply?   @relation("ReplyLikes", fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // لا يمكن للمستخدم الإعجاب بنفس المنشور أكثر من مرة
  @@unique([commentId, userId]) // لا يمكن للمستخدم الإعجاب بنفس التعليق أكثر من مرة
  @@unique([replyId, userId]) // لا يمكن للمستخدم الإعجاب بنفس الرد أكثر من مرة
  @@index([postId])
  @@index([commentId])
  @@index([replyId])
  @@index([userId])
}
